// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  nickname String   @unique
  password String
  phone    String   @unique
  avatar   String?
  role     RoleType @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  tokens        Token[]
  fav           Fav[]
  Product       Product[]
  Posts         Posts[]
  Comments      Comments[]
  PostsComments PostsComments[]

  PostFav PostFav[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
}

// 상품
model Product {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String @db.MediumText
  price       Int
  image       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  favs     Fav[]
  comments Comments[]
}

// 좋아요
model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 게시글 좋아요
model PostFav {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Posts   Posts? @relation(fields: [postsId], references: [id])
  postsId Int?
}

// 게시글
model Posts {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  categories    CategoriesOnPosts[]
  postsComments PostsComments[]
  PostFav       PostFav[]
}

// 카테고리
model Category {
  id        Int                 @id @default(autoincrement())
  name      CategoryType        @unique @default(FREE)
  posts     CategoriesOnPosts[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model CategoriesOnPosts {
  posts      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([postId, categoryId])
}

// 댓글
model Comments {
  id        Int      @id @default(autoincrement())
  contents  String   @db.MediumText
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model PostsComments {
  id        Int      @id @default(autoincrement())
  contents  String   @db.MediumText
  updatedAt DateTime @updatedAt
  createAt  DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

}

// 권한 타입
enum RoleType {
  USER
  ADMIN
}

// 게시글 타입
enum CategoryType {
  FREE
  SCORE
  RECURIT
}
